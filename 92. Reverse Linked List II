class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if (!head || left == right) return head;

        ListNode dummy(0);
        dummy.next = head;
        ListNode* before = &dummy;

        // Move 'before' to node just before 'left'
        for (int i = 1; i < left; ++i) {
            before = before->next;
        }

        ListNode* curr = before->next;
        ListNode* tail = curr;
        ListNode* prev = nullptr;

        // Reverse nodes from 'left' to 'right'
        for (int i = 0; i <= right - left; ++i) {
            ListNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        // Reconnect the reversed segment
        before->next = prev;  // Connect node before reversal to new head of reversed part
        tail->next = curr;    // Connect tail of reversed part to remaining list

        return dummy.next;    // Return new head (safe for left == 1)
    }
};
