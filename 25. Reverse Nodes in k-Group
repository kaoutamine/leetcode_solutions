class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if (!head || k == 1) return head;

        ListNode dummy(0);
        dummy.next = head;
        ListNode* prevGroupEnd = &dummy;

        while (checkKElements(prevGroupEnd->next, k)) {
            ListNode* groupStart = prevGroupEnd->next;
            ListNode* curr = groupStart;
            ListNode* prev = nullptr;
            for (int i = 0; i < k; ++i) {
                ListNode* next = curr->next;
                curr->next = prev;
                prev = curr;
                curr = next;
            }
            prevGroupEnd->next = prev;
            groupStart->next = curr;
            prevGroupEnd = groupStart;
        }

        return dummy.next;
    }

    bool checkKElements(ListNode* node, int k) {
        int count = 0;
        while (node && count < k) {
            node = node->next;
            count++;
        }
        return count == k;
    }
};
